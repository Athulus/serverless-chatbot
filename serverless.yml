# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverless-chatbot

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  profile: serverless-chatbot
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:*:*:table/${self:custom.teamTable}
    - Effect: "Allow"
      Action:
        - rekognition:DetectFaces
      Resource: "*"
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: arn:aws:s3:::${self:custom.uploadBucket}/*
    - Effect: "Allow"
      Action:
        - s3:GetObject
        - s3:PutObject
      Resource: arn:aws:s3:::${self:custom.transformBucket}/*

custom:
  uploadBucket: ${self:service}-${self:provider.stage}-uploads-max-redmond
  transformBucket: ${self:service}-${self:provider.stage}-transform-max-redmond
  teamTable: ${self:service}-${self:provider.stage}-teams

functions:
  install:
    handler: install.endpoint
    environment:
      CLIENT_ID: '175669429926.174792068483'
      CLIENT_SECRET: 48aabd9147c82894047ed1e04a555434
      SLACK_OAUTH: 'https://slack.com/api/oauth.access?'
      TABLE_NAME: ${self:custom.teamTable}
    events:
      - http:
          path: install
          method: get
  bot:
    handler: bot.endpoint
  hello:
    handler: handler.endpoint
    events:
      - http:
          path: echo
          method: post
    environment:
      POST_MESSAGE_URL: 'https://slack.com/api/chat.postMessage?'
      BOT_ACCESS_TOKEN: 'xoxb-174199654288-ZaIjVdX9G2xFpCZC0mGB5C9G'
      BOT_ID: 'U545VK88G'
      VERIFICATION_TOKEN: 'Py3M22CgliCE9VYBVgg1yGmV'
      UPLOAD_BUCKET: ${self:custom.uploadBucket}
      SLACK_HOSTNAME: 'files.slack.com'
      TEMP_FOLDER: '/tmp/'
  faceswap:
    handler: faceswap.execute
    environment:
      TEMP_FOLDER: '/tmp/'
      OUTPUT_PREFIX: 'output-'
      UPLOAD_BUCKET: ${self:custom.uploadBucket}
      TRANSFORM_BUCKET: ${self:custom.transformBucket}
    events:
      - s3:
          bucket: ${self:custom.uploadBucket}
          event: s3:ObjectCreated:*
  slackupdate:
    handler: slackupdate.execute
    environment:
      POST_MESSAGE_URL: 'https://slack.com/api/chat.postMessage?'
      BOT_ACCESS_TOKEN: 'xoxb-174199654288-ZaIjVdX9G2xFpCZC0mGB5C9G'
      CHANNEL_ID: 'C54P8TJ5R'
      SHORTENER_API_KEY: 'AIzaSyCxWll4C1lTJenn-9ZD8LYFp9zVET94C5o'
      SHORTENER_API_URL: 'https://www.googleapis.com/urlshortener/v1/url?'
    events:
      - s3:
          bucket: ${self:custom.transformBucket}
          event: s3:ObjectCreated:*

resources:
  Resources:
    NewResource:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.teamTable}
        AttributeDefinitions:
          - AttributeName: team_id
            AttributeType: S
        KeySchema:
          - AttributeName: team_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
